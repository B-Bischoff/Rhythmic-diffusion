/*
* This functions is not similar to the "insidePlainTriangle" function located in triangle.comp
* In this one, the center of the triangle is located on the top vertex and not in the middle of the 3 vertices,
* Allowing it to rotate in a non-symetrical way, thus creating an hexagon with 6 triangles, each rotate with an offset of 60 degrees.
*/
bool insideTriangle(int currentShape, float triangleAngle, float hexagonRadius)
{
	const vec2 imageSize = imageSize(texture);

	// Define the coordinates of the triangle's vertices
	vec2 v1 = vec2(imageSize.x / 2.0, imageSize.y / 2.0); // Top vertex

	// Things go crazy when you put anything but 60
	float x = cos(radians(60.0)) * hexagonRadius;
	float y = sin(radians(60.0)) * hexagonRadius;
	vec2 v2 = vec2(imageSize.x / 2.0 - x, imageSize.y / 2.0 - y); // Left vertex
	vec2 v3 = vec2(imageSize.x / 2.0 + x, imageSize.y / 2.0 - y); // Right vertex

	// The triangle's pivot point is its top vertex
	vec2 center = v1;

	float theta = radians(triangleAngle + angle[currentShape]);
	mat2 rotationMatrix = mat2(cos(theta), -sin(theta), sin(theta), cos(theta));

	// Rotate each vertex around the center point
	v1 = rotationMatrix * (v1 - center) + center;
	v2 = rotationMatrix * (v2 - center) + center;
	v3 = rotationMatrix * (v3 - center) + center;

	vec2 p = vec2(gl_GlobalInvocationID.xy);
	return (p.x - v1.x) * (v2.y - v1.y) - (p.y - v1.y) * (v2.x - v1.x) < 0.1 &&
		(p.x - v2.x) * (v3.y - v2.y) - (p.y - v2.y) * (v3.x - v2.x) <    0.1 &&
		(p.x - v3.x) * (v1.y - v3.y) - (p.y - v3.y) * (v1.x - v3.x) <    0.1;
}

bool insideHexagon(int currentShape)
{
	bool insideLargerHexagon = false;
	for (int i = 0; i < 360; i += 60)
	{
		if (insideTriangle(currentShape, float(i), radius[currentShape]))
		{
			insideLargerHexagon = true;
			// If border is equal to 0, consider the hexagon as plain
			if (border[currentShape] == 0)
				return true;
			break;
		}
	}
	for (int i = 0; i < 360; i += 60)
	{
		if (insideTriangle(currentShape, float(i), radius[currentShape] - border[currentShape]))
			return false;
	}
	return insideLargerHexagon;
}
