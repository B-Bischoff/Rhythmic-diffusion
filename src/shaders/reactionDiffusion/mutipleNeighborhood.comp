#version 460 core
layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D currentScreen;
layout(rgba32f, binding = 1) uniform image2D nextScreen;
layout(rgba32f, binding = 2) uniform image2D paramScreen;

layout (location = 1) uniform float _ReactionSpeed;
// vec 4 properties :
// x = diffusion rate A
// y = diffusion rate B
// z = feed rate
// w = kill rate

vec3 laplacian(in ivec2 uv, in vec2 texelSize) {
	vec3 rg = vec3(0, 0, 0);

	rg += imageLoad(currentScreen, uv + ivec2(-1, -1)).rgb * 0.05;
	rg += imageLoad(currentScreen, uv + ivec2(0, -1)).rgb * 0.2;
	rg += imageLoad(currentScreen, uv + ivec2(1, -1)).rgb * 0.05;
	rg += imageLoad(currentScreen, uv + ivec2(-1, 0)).rgb * 0.2;
	rg += imageLoad(currentScreen, uv + ivec2(0, 0)).rgb * -1;
	rg += imageLoad(currentScreen, uv + ivec2(1, 0)).rgb * 0.2;
	rg += imageLoad(currentScreen, uv + ivec2(-1, 1)).rgb * 0.05;
	rg += imageLoad(currentScreen, uv + ivec2(0, 1)).rgb * 0.2;
	rg += imageLoad(currentScreen, uv + ivec2(1, 1)).rgb * 0.05;

	return rg;
}

void main()
{
	vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);

	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	vec4 existingPixel = imageLoad(currentScreen, pixel_coords);

	vec4 parameters = imageLoad(paramScreen, pixel_coords);
	float diffusionRateA = parameters.x;
	float diffusionRateB = parameters.y;
	float feedRate = parameters.z;
	float killRate = parameters.w;

	float a = existingPixel.r;
	float b = existingPixel.b;

	float sum = 0;

	int N = 6;
	for (int i = -N; i <= N; i++)
	{
		for (int j = -N; j <= N; j++)
		{
			if (i == 0 && j == 0)
				continue;

			sum += imageLoad(currentScreen, pixel_coords + ivec2(i, j)).b;

		}
	}

	float b2 = 0;

	if( sum >= 0.0 
		&&  sum <= 1.0 ) { b2 = 0.0; }
	if( sum >= 3.0 
		&&  sum <= 3.0 ) { b2 = 1.0; }
	if( sum >= 4.0 
		&&  sum <= 8.0 ) { b2 = 0.0; }


	pixel = vec4(0, 0, b2, 1.0);

	imageStore(nextScreen, pixel_coords, pixel);
}
